TODO:
- si encuentra error de conexión, reintentar indefinidamente, con intervalos de espera cada vez más largos
- cada vez que escribe al csv, registrar en archivo temporal las combinaciones de valores exploradas. Al principio del script verificar la presencia de este archivo temporal y cargarlo si existe. Al ingresar a cada iteración de cada loop, verificar si la combinación ya fue explorada, y skippear en caso afirmativo. Si script termina de ejecutarse correctamente, eliminar el archivo temporal
- indicar fecha de acceso en cada row
- obtener el código de prestador e incluirlo en cada row
- transformar el csv al formato wide; al hacerlo, concatenar cartilla > categoría > especialidad
- obtener coordenadas
- geojson con 2 propiedades: plan y especialidad, cada una es una lista de planes y especialidades para el prestador
- agregar fecha de última obtención al csv (o geojson) y mostrar en mapa
- https://leafletjs.com/examples/geojson/
- https://leafletjs.com/reference-1.4.0.html#geojson

L.geoJSON(someFeatures, {
    onEachFeature: onEachFeature,
    filter: function(feature, layer) {
        return feature.properties.show_on_map;
    }
}).addTo(map);

geoJSON extends FeatureGroup, which extends LayerGroup, which "if you add it to the map, any layers added or removed from the group will be added/removed on the map as well"
geoJSON objects inherit remove() method from Layer
